class Solution {
private:
    void dfsr(vector<vector<int>>& adj, vector<int>& visited, int node) {
        visited[node] = 1;
        for (auto it : adj[node]) {
            if (!visited[it]) {
                dfsr(adj, visited, it);
            }
        }
    }
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        int V = isConnected.size();
        vector<vector<int>> adjLs(V);
        
        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                if (isConnected[i][j] == 1 && i != j) {
                    adjLs[i].push_back(j);
                    adjLs[j].push_back(i);
                }
            }
        }
        
        vector<int> visited(V, 0);
        int count = 0;
        
        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                count++;
                dfsr(adjLs, visited, i);
            }
        }
        
        return count;
    }
};
