#User function Template for python3


#Function to determine if graph can be coloured with at most M colours such
#that no two adjacent vertices of graph are coloured with same colour.
def isSafe(node,graph,color,c,n):
    # Check if this color is safe for vertex v
    for i in range(n):
        if graph[node][i] == 1 and color[i] == c:
            return False
    return True

def graphColoringUtil(node,graph,n,m,color):
    # Base case: If all vertices are assigned a color then return true
    if node == n:
        return True
    for c in range(1,m+1):
        if isSafe(node,graph,color,c,n):
            color[node] = c
            if graphColoringUtil(node+1,graph,n,m,color):
                return True
            color[node] = 0
    return False
            
def graphColoring(graph, m, n):
    # Initialize all color values as 0. This initialization is needed
    # correct functioning of isSafe()
    color = [0] * n
    # Call graphColoringUtil() for vertex 0
    if graphColoringUtil(0,graph,n,m,color) == False:
        return 0

    return 1

    

#{ 
 # Driver Code Starts
#Initial Template for Python 3

if __name__ == "__main__":
    t = int(input())
    while(t>0):
        V = int(input())
        k = int(input())
        m = int(input())
        list = [int(x) for x in input().strip().split()]
        graph = [[0 for i in range(V)] for j in range(V)]
        cnt = 0
        for i in range(m):
            graph[list[cnt]-1][list[cnt+1]-1]=1
            graph[list[cnt+1]-1][list[cnt]-1]=1
            cnt+=2
        if(graphColoring(graph, k, V)==True):
            print(1)
        else:
            print(0)

        t = t-1

# } Driver Code Ends
