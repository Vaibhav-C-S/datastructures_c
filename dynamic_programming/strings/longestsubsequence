class Solution:
    def stringutil(self,text1,text2,m,n):
        if m <0 or n<0:
            return 0
        if text1[m] == text2[n]:
            return 1 + self.stringutil(text1,text2,m-1,n-1)
        return 0 + max(self.stringutil(text1,text2,m-1,n),self.stringutil(text1,text2,m,n-1) )
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        m = len(text1)
        n = len(text2)
        return self.stringutil(text1,text2,m-1,n-1)
  ------------------------------------------
  class Solution:
    def stringutil(self,text1,text2,m,n,dp):
        if m <0 or n<0:
            return 0
        if text1[m] == text2[n]:
            return 1 + self.stringutil(text1,text2,m-1,n-1,dp)
        if dp[m][n] != -1:
            return dp[m][n]
        dp[m][n]= 0 + max(self.stringutil(text1,text2,m-1,n,dp),self.stringutil(text1,text2,m,n-1,dp) )
        return dp[m][n]
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        m = len(text1)
        n = len(text2)
        dp= [[-1 for _ in range(n)]for _ in range(m)]
        return self.stringutil(text1,text2,m-1,n-1,dp)
-----------------------------------------------------
def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        m = len(text1)
        n = len(text2)
        dp= [[0 for _ in range(n+1)]for _ in range(m+1)]
        for i in range(1,m+1):
            for j in range(1,n+1):
                if text1[i-1] == text2[j-1]:
                    dp[i][j] = 1 + dp[i-1][j-1]
                else:
                    dp[i][j]= 0 + max(dp[i-1][j],dp[i][j-1] )

        return dp[m][n]
  -----------------------------------------------------
  def longestCommonSubsequence(self, text1: str, text2: str) -> int:
    # Ensure text1 is the shorter string
    if len(text1) > len(text2):
        text1, text2 = text2, text1

    m, n = len(text1), len(text2)
    dp = [0] * (m + 1)

    for j in range(1, n + 1):
        prev = 0
        for i in range(1, m + 1):
            temp = dp[i]
            if text1[i - 1] == text2[j - 1]:
                dp[i] = 1 + prev
            else:
                dp[i] = max(dp[i], dp[i - 1])
            prev = temp

    return dp[m]

