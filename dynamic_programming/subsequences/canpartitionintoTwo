class Solution(object):
    def subsetSumToK(self,n, k, arr):
    
        n = len(arr)
        prev = [False for _ in range(k+1)]
        prev[0] = True

        if arr[0] <= k:
            prev[arr[0]] = True

        for i in range(1, n):
            curr = [False for _ in range(k+1)]
            curr[0] = True
            for j in range(1, k+1):
                notpick = prev[j]
                pick = False
                if arr[i] <= j:
                    pick = prev[j-arr[i]]
                curr[j] = pick or notpick
            prev = curr[:]

        return prev[k]
    def canPartition(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        s = sum(nums)
        n = len(nums)
        if s%2 != 0:
            return False
        else:
            return self.subsetSumToK(n,s/2,nums)
        
