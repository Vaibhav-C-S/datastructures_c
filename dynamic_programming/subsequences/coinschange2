class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
        n = len(coins)
        dp = [[-1 for _ in range(amount+1)]for _ in range(n)]
        ans = self.coinutil(n-1,coins,amount,dp) 
        return ans
    def coinutil(self,i,coins,amount,dp):
        if i == 0:
            if amount%coins[i] == 0:
                return 1
            else:
                return 0
        if dp[i][amount] != -1:
            return dp[i][amount]
        nottake = 0 + self.coinutil(i-1,coins,amount,dp)
        take = 0
        if coins[i] <= amount:
            take  =  self.coinutil(i,coins,amount-coins[i],dp)
        dp[i][amount] = take + nottake
        return dp[i][amount]
    
        
        
-----------------------------------
class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
        n = len(coins)
        dp = [[0 for _ in range(amount + 1)] for _ in range(n)]

        # Initialize for amount 0
        for i in range(n):
            dp[i][0] = 1

        for i in range(n):
            for amt in range(1, amount + 1):
                nottake = dp[i-1][amt] if i > 0 else 0
                take = dp[i][amt - coins[i]] if amt - coins[i] >= 0 else 0
                dp[i][amt] = take + nottake

        return dp[n - 1][amount]
---------------------------------------------
class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
        dp = [0 for _ in range(amount + 1)]
        dp[0] = 1  # Base case: there's 1 way to make amount 0

        for coin in coins:
            for amt in range(coin, amount + 1):
                dp[amt] += dp[amt - coin]

        return dp[amount]
