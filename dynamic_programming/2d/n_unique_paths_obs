class Solution(object):
    def uni(self,i,j,obstacleGrid):
        if(i>=0 and j>=0 )and obstacleGrid[i][j]==1:
            return 0
        if(i==0 and j==0):
            return 1
        if (i <0 or j<0):
            return 0
        up = self.uni(i-1,j,obstacleGrid)
        left =  self.uni(i,j-1,obstacleGrid)
        return up + left
    def uniquePathsWithObstacles(self, obstacleGrid):
        """
        :type obstacleGrid: List[List[int]]
        :rtype: int
        """
        
        m = len(obstacleGrid)
        n = len(obstacleGrid[0])
        return self.uni(m-1,n-1,obstacleGrid)
------------------------
class Solution(object):
    def uni(self,i,j,obstacleGrid,dp):
        if(i>=0 and j>=0 )and obstacleGrid[i][j]==1:
            return 0
        if(i==0 and j==0):
            return 1
        if (i <0 or j<0):
            return 0
        if dp[i][j]!=-1:
            return dp[i][j]
        up = self.uni(i-1,j,obstacleGrid,dp)
        left =  self.uni(i,j-1,obstacleGrid,dp)
        dp[i][j] = up+left
        return dp[i][j]
    def uniquePathsWithObstacles(self, obstacleGrid):
        """
        :type obstacleGrid: List[List[int]]
        :rtype: int
        """
        m = len(obstacleGrid)
        n = len(obstacleGrid[0])
        dp = [[-1 for _ in range(n)]for _ in range(m)]
        return self.uni(m-1,n-1,obstacleGrid,dp)
-------------------------------------
class Solution(object):
    def uni(self,i,j,obstacleGrid,dp):
        if(i>=0 and j>=0 )and obstacleGrid[i][j]==1:
            return 0
        if(i==0 and j==0):
            return 1
        if (i <0 or j<0):
            return 0
        if dp[i][j]!=-1:
            return dp[i][j]
        up = self.uni(i-1,j,obstacleGrid,dp)
        left =  self.uni(i,j-1,obstacleGrid,dp)
        dp[i][j] = up+left
        return dp[i][j]
    def uniquePathsWithObstacles(self, obstacleGrid):
        """
        :type obstacleGrid: List[List[int]]
        :rtype: int
        """
        m = len(obstacleGrid)
        n = len(obstacleGrid[0])
        dp = [[0 for _ in range(n)]for _ in range(m)]
        for i in range(m):
            for j in range(n):
                if(i>=0 and j>=0 )and obstacleGrid[i][j]==1:
                    dp[i][j] = 0
                elif(i==0 and j==0):
                    dp[i][j]= 1
                elif (i <0 or j<0):
                    dp[i][j]= 0
                else:
                    up = dp[i-1][j]
                    left = dp[i][j-1]
                    dp[i][j]= up+left
        return dp[m-1][n-1]
-----------------------------------------------
class Solution(object):
    def uniquePathsWithObstacles(self, obstacleGrid):
        """
        :type obstacleGrid: List[List[int]]
        :rtype: int
        """
        m = len(obstacleGrid)
        n = len(obstacleGrid[0])
        dp = [0] * n

        dp[0] = 1 if obstacleGrid[0][0] == 0 else 0

        for i in range(m):
            for j in range(n):
                if obstacleGrid[i][j] == 1:
                    dp[j] = 0
                elif j > 0:
                    dp[j] += dp[j-1]

        return dp[n-1]
