class Solution(object):
    def uni(self, i, j, grid,n):
        if i == n-1:
            return grid[n-1][j]
        # down/down-right
        down = grid[i][j] + self.uni(i+1,j,grid,n)
        downr = grid[i][j]+ self.uni(i+1,j+1,grid,n)
        return min(down,downr)
    def minimumTotal(self, triangle):
        """
        :type triangle: List[List[int]]
        :rtype: int
        """
        n = len(triangle)
        return self.uni(0,0,triangle,n)
        
----------------------------------------
class Solution(object):
    def uni(self, i, j, grid,n,dp):
        if i == n-1:
            return grid[n-1][j]
        if dp[i][j] != -1:
            return dp[i][j]
        down = grid[i][j] + self.uni(i+1,j,grid,n,dp)
        downr = grid[i][j]+ self.uni(i+1,j+1,grid,n,dp)
        dp[i][j] = min(down,downr)
        return dp[i][j]
    def minimumTotal(self, triangle):
        """
        :type triangle: List[List[int]]
        :rtype: int
        """
        
        n = len(triangle)
        dp = [[-1 for _ in range(i+1)]for i in range(n)]
        
        return self.uni(0,0,triangle,n,dp)
        
-----------------------------------------------------
        n = len(triangle)
        dp = [[-1 for _ in range(i+1)]for i in range(n)]
        for i in range(n):
            dp[n-1][i] = triangle[n-1][i]
        for i in reversed(range(n-1)):
            for j in reversed(range(i+1)):
                down = triangle[i][j] + dp[i+1][j]
                downr = triangle[i][j]+ dp[i+1][j+1]
                dp[i][j] = min(down,downr)
        print(dp)
        return dp[0][0]
---------------------------------------------------
def minimumTotal(self, triangle):
        n = len(triangle)
        # Initialize the DP array with the last row of the triangle
        dp = triangle[-1][:]

        # Iterate from the second last row to the top
        for i in range(n - 2, -1, -1):
            for j in range(i + 1):
                # Update the DP array by choosing the minimum path
                dp[j] = triangle[i][j] + min(dp[j], dp[j + 1])

        return dp[0]
